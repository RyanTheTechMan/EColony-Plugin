package com.ecolony.ecolony.modules;

import com.ecolony.ecolony.Main;
import com.ecolony.ecolony.utilities.PluginConfig;
import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.MustBeInvokedByOverriders;
import org.jetbrains.annotations.NotNull;

import java.util.List;
import java.util.logging.Level;

public interface Module {
    @NotNull
    String name();
    @NotNull
    String description();

    /**
     * @apiNote To run the module, call this method.
     * If the module is already running, this method will automagically call {@link #stop()} before starting the module again.
     */
    boolean start();
    boolean stop();


    /**
     * @return This function must be overridden by the implementing class and return the class's config generated from {@link #generateConfig()}
     */
    PluginConfig config();

    /**
     * @apiNote This method should not be called within the implementing class. It is automatically called by {@link #initModule()}
     */
    void initConfig();

    /**
     * @apiNote This method should be called within the class constructor.
     */
    default void initModule() {
        Bukkit.getLogger().log(Level.INFO, "[Ecolony] Module added: " + name());
        Main.instance.modules.put(id(), this);
        initConfig();
        if (isEnabled()) start();
    }

    /**
     * @return the id of the module
     * @apiNote While not required, this method should only be called if {@link #initModule()} was called.
     */
    default boolean isEnabled() {return Main.instance.config.getConfig().getBoolean("Modules." + id());}

    /**
     * @return the id of the module.
     * @apiNote This is generated by using {@link #name()} and converting to lowercase and replacing spaces with underscores.
     * This should only be called if {@link #initModule()} was called.
     */
    default String id() {
        String id = name().replaceAll("()([A-Z])", "$1_$2").toLowerCase();
        if (id.startsWith("_")) id = id.substring(1);
        return id;
    }

    /**
     * @param sender - the command sender
     * @param args - the command arguments
     * @return true if the command was successful, false otherwise
     */
    boolean onCommand(CommandSender sender, String[] args);

    /**
     * @param sender - the command sender
     * @param args - the command arguments
     * @return a list of strings that will be sent as tab completion
     */
    List<String> onTabComplete(CommandSender sender, String[] args);

    default PluginConfig generateConfig() {return new PluginConfig(Main.instance, "modules", id());}
}
